#!/bin/bash

# AIME MLC - Machine Learning Container Management 
# 
# Copyright (c) AIME GmbH and affiliates. Find more info at https://www.aime.info/mlc 
# 
# This software may be used and distributed according to the terms of the MIT LICENSE 

MLC_VERSION=3
INTERACTIVE=false
GPUS="all"
SUPPORTED_ARCH="ROCM6"
WORKSPACE_MOUNT=$HOME/workspace
DATA_MOUNT=

ARGS=()

for i in "$@"
do
case $i in
    -i|--interactive)
    INTERACTIVE=true
    ;;
    -g=*|--gpus=*)
    GPUS="${i#*=}"
    ;;
    -w=*|--workspace=*)
    WORKSPACE_MOUNT="${i#*=}"
    ;;
    -d=*|--data=*)
    DATA_MOUNT="${i#*=}"
    ;;
    -*)
    echo "Unknown option: $i"
    exit -1
    ;;
    *)
    ARGS+=($i)
          # unknown option
    ;;
esac
done

CONTAINER_NAME=${ARGS[0]}
FRAMEWORK_NAME=${ARGS[1]}
FRAMEWORK_VERSION=${ARGS[2]}

declare -A IMAGES
declare -A FRAMEWORK_ENTRIES

function join() {
    local separator=$1 values=$2
    shift 2 || shift $(($#))
    printf "%s" "$values${@/#/$separator}"
}

function check_container_exists {
  docker container ps -a --filter=name=$1 --filter=label=aime.mlc --format "{{.Names}}"
}

function read_repo {
  REPO_FILE=$1
  while IFS=',' read framework ver arch repo reserverd
   do
     framework=$(echo $framework | xargs)
     ver=$(echo $ver | xargs)
     arch=$(echo $arch | xargs)
     image=$(echo $image | xargs)
#     echo "'$framework' '$ver' $arch $repo"
     if [[ $arch == $SUPPORTED_ARCH ]]
     then
       entry=0
       if [[ -v "FRAMEWORK_ENTRIES[$framework]" ]]
       then
         entry=$((${FRAMEWORK_ENTRIES[$framework]} + 1))
       fi
       FRAMEWORK_ENTRIES[$framework]=$entry
       IMAGES[$framework,$entry,version]=$ver
       IMAGES[$framework,$entry,repo]=$repo
     fi
   done < $REPO_FILE
}

function get_frameworks {
  echo $(join ", " ${!FRAMEWORK_ENTRIES[@]})
}

function get_framework_versions {
  SEARCH_FRAMEWORK=$1

  for K in "${!FRAMEWORK_ENTRIES[@]}"
  do
    if [[ $K == $SEARCH_FRAMEWORK ]]
    then
      entries=${FRAMEWORK_ENTRIES[$K]}
      versions=()
      for i in $(seq 0 $entries);
      do
        versions+=( ${IMAGES[$K,$i,version]})
      done
      echo $(join ", " ${versions[@]})
      return
    fi
  done
}

function find_image {
  SEARCH_FRAMEWORK=$1
  SEARCH_VERSION=$2

  for K in "${!FRAMEWORK_ENTRIES[@]}"
  do
    if [[ $K == $SEARCH_FRAMEWORK ]]
    then
      entries=${FRAMEWORK_ENTRIES[$K]}
      versions=()
      for i in $(seq 0 $entries);
      do
        version=( ${IMAGES[$K,$i,version]})
        if [[ $version == $SEARCH_VERSION ]]
        then
          image=${IMAGES[$K,$i,repo]}
          echo $image
          return
        fi
      done
    fi
  done
}


function print_help {
  echo -e "\nCreate a new machine learning container"
  echo -e "\nUsage: mlc-create container_name framework version [-w=workspace_dir] [-d=data_dir]"

  echo -e "\nAvailable Frameworks:\n\n$(get_frameworks)"

  echo -e "\nAvailable Versions:\n"
  for K in "${!FRAMEWORK_ENTRIES[@]}"
  do
    echo "$K: $(get_framework_versions $K)"
    echo -e ""
  done
}


read_repo $(dirname $0)/ml_images.repo

if [[ $CONTAINER_NAME == "" || $FRAMEWORK_NAME == "" ]]
then
  print_help
  exit 0
fi

USER_ID=$(id -u)
GROUP_ID=$(id -g)

CONTAINER_TAG=$CONTAINER_NAME._.$USER_ID

if [[ $CONTAINER_TAG == $(check_container_exists $CONTAINER_TAG) ]]
then
  echo -e "\nError: container ["$CONTAINER_NAME"] already exists."
  exit -1
fi


available_frameworks="$(get_frameworks)"
available_versions="$(get_framework_versions $FRAMEWORK_NAME)"
if [[ $available_versions == "" ]]
then
  echo -e "\nError: unknown framework '$FRAMEWORK_NAME'"
  echo -e "\nAvailable frameworks are: $available_frameworks"
  exit -2
fi

IMAGE=$(find_image $FRAMEWORK_NAME $FRAMEWORK_VERSION)

if [[ $IMAGE == "" ]]
then
  if [[ $FRAMEWORK_VERSION == "" ]]
  then
    echo -e "\nError: framework versions not specified"
  else
    echo -e "\nError: unavailable framework version '$FRAMEWORK_VERSION'"
  fi
  echo -e "\n\nAvailable '$FRAMEWORK_NAME' versions are: $available_versions"
  exit -3
fi

echo -e "\nCreating [$CONTAINER_NAME] with $FRAMEWORK_NAME $FRAMEWORK_VERSION"

WORKSPACE_MOUNT=$(realpath $WORKSPACE_MOUNT)
if [ -d "$WORKSPACE_MOUNT" ]; then
  echo -e "\n/workspace will mount on '$WORKSPACE_MOUNT' - OK"
else
  echo -e "\nAborted.\n\nWorkspace directory not existing: $WORKSPACE_MOUNT"
  echo -e "\nThe workspace directory will be mounted as /workspace in the container."
  echo -e "It is the directory where your project data should be stored to be accessed\ninside the container."
  echo -e "\nIt can be set to an existing directory with the option '-w=/your/workspace'\n"
  exit -4
fi

if [[ $DATA_MOUNT != "" ]]
then
  DATA_MOUNT=$(realpath $DATA_MOUNT)
  if [ -d "$DATA_MOUNT" ]; then
    echo -e "/data will mount on '$DATA_MOUNT' - OK"
  else
    echo -e "\nAborted.\n\nData directory not existing: $DATA_MOUNT"
    echo -e "\nThe data directory will be mounted as /data in the container."
    echo -e "It is the directory where data sets for example mounted from\nnetwork volumes can be accessed inside the container."
    exit -4
  fi
fi

echo -e "\nAcquiring container image ... \n"

docker pull $IMAGE

echo -e "\nSetting up container ... \n"

CONTAINER_LABEL="aime.mlc"
WORKSPACE=/workspace
DATA=/data

docker run -v $WORKSPACE_MOUNT:$WORKSPACE -w $WORKSPACE --name=$CONTAINER_TAG --tty --privileged -u root --network=host --device=/dev/kfd --device=/dev/dri --device /dev/snd --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --shm-size 8G --ipc=host --ulimit memlock=-1 --ulimit stack=67108864 -v /tmp/.X11-unix:/tmp/.X11-unix $IMAGE bash -c "apt-get update -y > /dev/null; apt-get install git -q -y > /dev/null; addgroup --gid $GROUP_ID $USER > /dev/null; adduser --uid $USER_ID --gid $GROUP_ID $USER --disabled-password --gecos aime > /dev/null; passwd -d $USER; echo \"$USER ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/${USER}_no_password; echo \"export ROCM_PATH=/opt/rocm\" >> /home/$USER/.bashrc; echo \"export PS1='[$CONTAINER_NAME] \\\`whoami\\\`@\\\`hostname\\\`:\\\${PWD#*}$ '\" >> /home/$USER/.bashrc; chmod 440 /etc/sudoers.d/${USER}_no_password; exit"
OUT=$(docker commit $CONTAINER_TAG $IMAGE:$CONTAINER_TAG)
OUT=$(docker rm $CONTAINER_TAG)

VOLUMES="-v $WORKSPACE_MOUNT:$WORKSPACE"
if [[ $DATA_MOUNT != "" ]]
then
  VOLUMES="$VOLUMES -v $DATA_MOUNT:$DATA"
fi
OUT=$(docker create -it $VOLUMES -w $WORKSPACE --name=$CONTAINER_TAG --label=$CONTAINER_LABEL=$USER --label=$CONTAINER_LABEL.NAME=$CONTAINER_NAME --label=$CONTAINER_LABEL.USER=$USER --label=$CONTAINER_LABEL.VERSION=$MLC_VERSION --label=$CONTAINER_LABEL.WORK_MOUNT=$WORKSPACE_MOUNT --label=$CONTAINER_LABEL.DATA_MOUNT=$DATA_MOUNT --label=$CONTAINER_LABEL.FRAMEWORK=$FRAMEWORK_NAME-$FRAMEWORK_VERSION --label=$CONTAINER_LABEL.GPUS=$GPUS --user $USER_ID:$GROUP_ID --tty --privileged --interactive --network=host --device /dev/snd --device=/dev/kfd --device=/dev/dri --ipc=host --group-add=video --cap-add=SYS_PTRACE --security-opt seccomp=unconfined --shm-size 8G --ulimit memlock=-1 --ulimit stack=67108864 -v /tmp/.X11-unix:/tmp/.X11-unix --group-add sudo $IMAGE:$CONTAINER_TAG bash -c "sudo chown root:video /dev/kfd; sudo chown -R root:video /dev/dri; bash")

echo -e "\n[$CONTAINER_NAME] ready. Open the container with: mlc-open $CONTAINER_NAME\n"
